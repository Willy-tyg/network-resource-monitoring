


#include <iostream>
#include <fstream>
#include <chrono>
#include <thread>
#include <sys/sysinfo.h>
#include <unistd.h>
#include <ifaddrs.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/ioctl.h>
#include <net/if.h>
#include <sys/socket.h>
#include <sstream>
#include <mutex>
#include <sys/statvfs.h>
#include <sys/utsname.h>
#include <stdexcept>
#include <array>
#include <regex>
#include <dirent.h>
#include <cstring>
#include <algorithm>

using namespace std;
std::mutex file_mutex;

struct SystemInfo {
    std::string timestamp;
    int cpu_cores;
    long ram_total;
    long disk_total;
    std::string hostname;
    std::string ip_address;
    std::string mac_address;
    long swap_total;
    std::string system;
    std::string system_version;
    std::string architecture;

};


struct SystemInfoVariable {
    std::string timestamp;
    long ram_free;
    long disk_unused;
    long cpu_frequency;
    std::string mac_address;
    string uptime;
    long cache_size;
    long swap_free;
    int active_process;
    long cpu_temperature;

};


std::string exec(const char* cmd) {
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd, "r"), pclose);
    if (!pipe) {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }
    return result;
}



SystemInfo collectSystemInfo() {
    SystemInfo info;

    // Récupérer le temps actuel comme horodatage
    auto now = std::chrono::system_clock::now();
    std::time_t now_c = std::chrono::system_clock::to_time_t(now);
    info.timestamp = std::ctime(&now_c);
    info.timestamp.pop_back(); // Supprimer le saut de ligne final

    // Récupérer les informations CPU: nombre de coeurs
    std::ifstream cpuinfo("/proc/cpuinfo");
    int coreCount = 0;
    std::string line;
    while (std::getline(cpuinfo, line)) {
        if (line.find("processor") != std::string::npos) {
            coreCount++;
        }
    }
    cpuinfo.close();
    info.cpu_cores = coreCount;

    // Récupérer les informations sur la mémoire swap total et ram total
    std::ifstream meminfo("/proc/meminfo");
    if (!meminfo.is_open()) {
        std::cerr << "Impossible d'ouvrir le fichier /proc/meminfo" << std::endl;
    }
    
    unsigned long long total_memory = 0, total_swap = 0;
    while (std::getline(meminfo, line)) {
        if (line.find("MemTotal:") != std::string::npos) {
            total_memory = std::stoll(line.substr(line.find_first_of(" ") + 1));
        } else if (line.find("SwapTotal:") != std::string::npos) {
            total_swap = std::stoll(line.substr(line.find_first_of(" ") + 1));
        }
    }
    meminfo.close();
    info.ram_total = total_memory;
    info.swap_total = total_swap;

    // Récupérer le nom d'hôte
    char hostname[1024];
    gethostname(hostname, 1024);
    info.hostname = hostname;

    // Récupérer l'adresse IP
    struct ifaddrs *ifap, *ifa;
    struct sockaddr_in *sa;
    getifaddrs(&ifap);
    for (ifa = ifap; ifa; ifa = ifa->ifa_next) {
        if (ifa->ifa_addr->sa_family == AF_INET) {
            sa = (struct sockaddr_in *)ifa->ifa_addr;
            info.ip_address = inet_ntoa(sa->sin_addr);
            break;
        }
    }
    freeifaddrs(ifap);

    // Récupérer l'adresse MAC
    int fd = socket(AF_INET, SOCK_DGRAM, 0);
    struct ifreq ifr;
    ifr.ifr_addr.sa_family = AF_INET;
    strncpy(ifr.ifr_name, "eth0", IFNAMSIZ - 1);
    ioctl(fd, SIOCGIFHWADDR, &ifr);
    close(fd);
    unsigned char *mac = (unsigned char *)ifr.ifr_hwaddr.sa_data;
    char mac_str[18];
    sprintf(mac_str, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
    info.mac_address = mac_str;

    // Récupérer l'utilisation du disque
    struct statvfs stat;
    statvfs("/", &stat);
    unsigned long long total_space = static_cast<unsigned long long>(stat.f_blocks) * stat.f_frsize;
    info.disk_total = total_space;

    // Récupérer les informations du système
    struct utsname unameData;
    if (uname(&unameData) == 0) {
        info.system = unameData.sysname;
        info.system_version = unameData.release;
        info.architecture = unameData.machine;
    } else {
        std::cerr << "Erreur lors de la récupération des informations système." << std::endl;
    }

    return info;
}



SystemInfoVariable collectSystemInfoVar() {
    SystemInfoVariable info;

    // Récupérer le temps actuel comme horodatage
    auto now = std::chrono::system_clock::now();
    std::time_t now_c = std::chrono::system_clock::to_time_t(now);
    info.timestamp = std::ctime(&now_c);
    info.timestamp.pop_back(); // Supprimer le saut de ligne final

    // Récupérer les informations CPU
    std::ifstream cpuinfo("/proc/cpuinfo");
    std::string line;
    while (std::getline(cpuinfo, line)) {
        if (line.find("cpu MHz") != std::string::npos) {
            info.cpu_frequency = std::stol(line.substr(line.find(":") + 2));
        }
    }
    cpuinfo.close();


    // Récupérer les informations sur la mémoire
    struct sysinfo memInfo;
    sysinfo(&memInfo);
    info.ram_free = memInfo.freeram * memInfo.mem_unit;
    info.swap_free = memInfo.freeswap * memInfo.mem_unit;

    //heure d'extinction allumage
    std::string lastShutdown = exec("last -x shutdown | head -n 1");
    // Expression régulière pour capturer l'heure de mise hors tension et de mise sous tension
    std::regex pattern("\\b\\w{3} \\w{3} \\d{1,2} \\d{2}:\\d{2} - \\d{2}:\\d{2}\\b");

    // Recherche des correspondances dans la chaîne de sortie de last -x shutdown
    std::smatch match;
    if (std::regex_search(lastShutdown, match, pattern)) {
        std::string shutdownTime = match.str();
        info.uptime = shutdownTime;
    } else {
        std::cout << "Aucune heure de mise hors tension trouvée." << std::endl;
    }


    // Récupérer l'adresse MAC
    int fd;
    struct ifreq ifr;
    fd = socket(AF_INET, SOCK_DGRAM, 0);
    ifr.ifr_addr.sa_family = AF_INET;
    strncpy(ifr.ifr_name, "eth0", IFNAMSIZ - 1);
    ioctl(fd, SIOCGIFHWADDR, &ifr);
    close(fd);
    unsigned char *mac = (unsigned char *)ifr.ifr_hwaddr.sa_data;
    char mac_str[18];
    sprintf(mac_str, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
    info.mac_address = mac_str;

    // Récupérer l'espacr dsque non utilisé
    struct statvfs stat;
    statvfs("/", &stat);
    unsigned long long available_space = static_cast<unsigned long long>(stat.f_bavail) * stat.f_frsize;
    info.disk_unused = available_space;

    // Récupérer la taille du cache 
    info.cache_size = memInfo.bufferram * memInfo.mem_unit;

    //recuperer le nombre de processus actif
    std::vector<pid_t> processIDs;
    DIR* dir = opendir("/proc");
    if (dir != NULL) {
        struct dirent* entry;
        while ((entry = readdir(dir)) != NULL) {
            if (std::all_of(entry->d_name, entry->d_name + std::strlen(entry->d_name), [](char c) { return std::isdigit(c); })) {
                processIDs.push_back(std::stoi(entry->d_name));
            }
        }
        closedir(dir);
    }
    info.active_process =  processIDs.size();

    //récupérer la température
    std::ifstream tempFile("/sys/class/thermal/thermal_zone0/temp");
    if (tempFile.is_open()) {
        std::string temp;
        std::getline(tempFile, temp);
        int tempValue = std::stoi(temp) / 1000; // Convertir de millidegrés Celsius en degrés Celsius

        info.cpu_temperature =  tempValue;

        tempFile.close();
    } else {
        std::cerr << "Impossible d'ouvrir le fichier de température" << std::endl;
    }


    return info;
}

std::string toCSV(const SystemInfo& info) {
    std::ostringstream oss;
    oss << info.timestamp << ","
        << info.cpu_cores << ","
        << info.ram_total << ","
        << info.disk_total << ","
        << info.hostname << ","
        << info.ip_address << ","
        << info.mac_address << ","
        << info.swap_total << ","
        << info.system << ","
        << info.system_version << ","
        << info.architecture;
    return oss.str();
}


std::string toCSVvar(const SystemInfoVariable& info) {
    std::ostringstream oss;
    oss << info.timestamp << ","
        << info.ram_free << ","
        << info.disk_unused << ","
        << info.cpu_frequency << ","
        << info.mac_address << ","
        << info.uptime << ","
        << info.cache_size << ","
        << info.swap_free<< ","
        << info.active_process<< ","
        << info.cpu_temperature;

    return oss.str();
}


void writeCSVToFile(const std::string& csv, const std::string& filename) {
    std::lock_guard<std::mutex> guard(file_mutex);
    std::ofstream file(filename, std::ios_base::app); // mode append
    if (file.is_open()) {
        file << csv << std::endl;
        file.close();
        std::cout << "Données écrites dans le fichier : " << filename << std::endl;
    } else {
        std::cerr << "Impossible d'ouvrir le fichier : " << filename << std::endl;
    }
}



int sendFileOverSocket(const std::string& csv, int clientSocket) {
    const char* request = "STOR";
    send(clientSocket, request, strlen(request) + 1, 0);

    file_mutex.lock();
    std::ifstream file(csv, std::ios::binary);
    if (!file.is_open()) {
        std::cerr << "Erreur : Impossible d'ouvrir le fichier à envoyer : " << csv << std::endl;
        file_mutex.unlock();
        return -1;
    }

    char buffer[1024];
    while (file.read(buffer, sizeof(buffer)).gcount() > 0) {
        ssize_t bytesSent = send(clientSocket, buffer, file.gcount(), 0);
        if (bytesSent == -1) {
            std::cerr << "Erreur : Échec de l'envoi des données du fichier." << std::endl;
            file.close();
            file_mutex.unlock();
            return -1;
        }
    }

    file.close();
    file_mutex.unlock();

    const char* end_request = "END";
    send(clientSocket, end_request, strlen(end_request) + 1, 0);

    std::cout << "Données envoyées avec succès au serveur." << std::endl;
    return 0;
}

int main() {
    const std::string filename = "system_info_var.csv";
    const std::string server_hostname = "192.168.191.174"; // Replace with your server's IP
    const int server_port = 12345;
    const int collection_interval = 3; // seconds
    const int socket_send_interval = 35; // seconds

    int clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == -1) {
        std::cerr << "Échec de la création du socket." << std::endl;
        return 1;
    }

    struct sockaddr_in serverAddress;
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_port = htons(server_port);
    serverAddress.sin_addr.s_addr = inet_addr(server_hostname.c_str());

    if (connect(clientSocket, (struct sockaddr*)&serverAddress, sizeof(serverAddress)) == -1) {
        perror("Erreur de connexion au serveur");
        close(clientSocket);
        return 1;
    }

    std::cout << "Connecté au serveur" << std::endl;

    char buffer[1024];
    ssize_t bytesReceived = recv(clientSocket, buffer, sizeof(buffer), 0);
    if (bytesReceived <= 0) {
        close(clientSocket);
        return -1;
    }

    buffer[bytesReceived] = '\0'; 
    std::string receivedMessage(buffer);

    if (receivedMessage == "NOUVEAU") {
        SystemInfo info = collectSystemInfo();
        std::string csv = toCSV(info);
        if (send(clientSocket, csv.c_str(), csv.size(), 0) == -1) {
            std::cerr << "Erreur : Échec de l'envoi des données du fichier." << std::endl;
            close(clientSocket);
            return -1;
        }
    }

    auto last_socket_send_time = std::chrono::steady_clock::now();

    std::ofstream ofs(filename, std::ios::trunc);
    ofs.close();
    bool send_first = false;
    std::string tempFileName = "temp_file.csv";
    std::ofstream tempFile(tempFileName);

    while (true) {
        SystemInfoVariable info = collectSystemInfoVar();
        std::string csvVar = toCSVvar(info);
        writeCSVToFile(csvVar, filename);

        auto current_time = std::chrono::steady_clock::now();
        auto elapsed_time = std::chrono::duration_cast<std::chrono::seconds>(current_time - last_socket_send_time).count();
        if (elapsed_time >= socket_send_interval || !send_first) {
            if (tempFile && !tempFile.eof()) {
                if (sendFileOverSocket(tempFileName, clientSocket) == 0) {
                    std::ofstream ofs(tempFileName, std::ios::trunc);
                    ofs.close();
                }

                if (sendFileOverSocket(filename, clientSocket) == 0) {
                    last_socket_send_time = current_time;
                    std::ofstream ofs(filename, std::ios::trunc);
                    ofs.close();
                    send_first = true;
                } else {
                    std::ofstream temp_file(tempFileName, std::ios::app);
                    temp_file << csvVar << std::endl;
                    temp_file.close();
                    std::cerr << "Échec de l'envoi, les données ont été enregistrées dans le fichier temporaire." << std::endl;
                }
            } else {
                if (sendFileOverSocket(filename, clientSocket) == 0) {
                    last_socket_send_time = current_time;
                    std::ofstream ofs(filename, std::ios::trunc);
                    ofs.close();
                    send_first = true;
                } else {
                    std::ofstream temp_file(tempFileName, std::ios::app);
                    temp_file << csvVar << std::endl;
                    temp_file.close();
                    std::cerr << "Échec de l'envoi, les données ont été enregistrées dans le fichier temporaire." << std::endl;
                }
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(collection_interval));
    }

    return 0;
}